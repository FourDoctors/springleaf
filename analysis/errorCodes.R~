## ----setup, include=FALSE------------------------------------------------
knitr::opts_chunk$set(cache=FALSE)
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(include=TRUE)
knitr::opts_chunk$set(results="asis")
knitr::opts_chunk$set(fig.width=12)
knitr::opts_chunk$set(fig.height=14)
prjpath <- "~/work/learn/competitions/kaggle/springleaf/"
datapath <- paste(prjpath, "data/", sep="")
analpath <- paste(prjpath, "analysis/", sep="")
rcodepath <- paste(analpath, "Rcode/", sep="")
setwd(analpath)



## ----loadLibsAndSource, include=FALSE------------------------------------

reqdpkgs <- c("lattice", "latticeExtra", "ggplot2", "reshape2",
              "plyr", "corrplot", "lubridate")
lapply(reqdpkgs, library, character.only=TRUE)



## ----dataload------------------------------------------------------------

train <- read.csv(paste(datapath, 'train_labeled.csv', sep=""),
                  stringsAsFactor=FALSE)
test <- read.csv(paste(datapath, 'test_labeled.csv', sep=""),
                 stringsAsFactor=FALSE)

print(paste("number of columns in train", ncol(train)))
print(paste("number of columns in test", ncol(test)))



## ----variablesToRemove---------------------------------------------------

varsToRemove = data.frame(
    variable = c(),
    reason = c()
    )



## ----datatypes-----------------------------------------------------------

V <- ncol(train)
predictors <- names(train)[-V]
predictor_types <- sapply(predictors, function(p) class(train[, p]))
print("Data types in the data frame train")
print(table(predictor_types))



## ----colByDataType-------------------------------------------------------

predictors_chr <- predictors[predictor_types == 'character']
predictors_num <- predictors[predictor_types == 'integer' |
                                 predictor_types == 'numeric']



## ----numvals-------------------------------------------------------------

numeric_val_counts <- data.frame(list(
    label = as.character(predictors_num),
    num_vals = sapply(predictors_num,
        function(p) length(unique(train[, p]))
    )),
    stringsAsFactors=FALSE
)

histogram(~ log10(num_vals), data=numeric_val_counts)



## ----singlevalvar--------------------------------------------------------

print(with(numeric_val_counts, label[num_vals == 1]))

varsToRemove <- rbind(varsToRemove,
                      data.frame(
                          list(
                              variable=with(numeric_val_counts,
                                  label[num_vals==1]),
                              reason='number of unique values is 1'
                              ),
                          stringsAsFactors=FALSE
                          )
                      )

print("the only value for numeric_792")
print(unique(train$numeric_792))
print("the only value for numeric_1373")
print(unique(train$numeric_1373))



## ----assumedvalsfew------------------------------------------------------

predictor.values.counts <- function(p, data=train){
    vals <- sort(unique(train[, p]), na.last=TRUE)
    tab <- data.frame(table(train[, p], useNA='ifany'))
    names(tab) <- c('value', 'count')
    tab$predictor <- p
    tab[, c("predictor", "value", "count")]
}

predictor.values <- function(vars, n, data=train) {
    mat <- cbind(vars,
                 do.call(rbind,
                         lapply(vars,
                                function(p) {
                                    sort(unique(train[, p]), na.last=TRUE)
                                })
                         )
                 )
    df <- data.frame(mat, stringsAsFactors=FALSE)
    names(df) <- c("variable", paste("value", 1:n, sep="."))
    df$entropy <- sapply(vars,
                         function(p) {
                             tab <- as.numeric(table(train[, p]))
                             prob <- tab/sum(tab)
                             -1 * sum(prob * log(prob))
                         })
    df$num.eff.vars <- exp(df$entropy)
    df
}

predictor.entropies <- function(vars, data=train, useNA='no') {
    df <- data.frame(
        list(
            variable = vars,
            entropy = sapply(vars, function(p) {
                                 tab <- as.numeric(table(train[,p]),
                                                   useNA = useNA)
                                 p <- tab/sum(tab)
                                 - sum(p * log2(p))
                             }),
            median = sapply(vars, function(p) {
                                median(train[,p], na.rm=TRUE)
                            }),
            max = sapply(vars, function(p) {
                             max(train[,p], na.rm=TRUE)
                         }),
            min = sapply(vars, function(p) {
                             min(train[, p], na.rm=TRUE)
                         }),
            distinct_vals = sapply(vars, function(p) {
                                       length(unique(train[,p], na.rm=TRUE))
                                   }),
            nacount = sapply(vars, function(p) {
                                 sum(is.na(train[,p]))
                             })
            ),
        stringsAsFactors=FALSE
        )

    df$num_eff_vals <- 2**(df$entropy)
    df <- df[order(df$num_eff_vals),]
    df
}



## ----varenteffval--------------------------------------------------------

var.entropies <- predictor.entropies(numeric_val_counts$label)
print(head(var.entropies))

save(var.entropies, file=paste(datapath, "varEntropies.Rdata", sep=""))



## ----threedistinctnum1---------------------------------------------------

three.vals <- predictor.values(
    with(numeric_val_counts, label[num_vals==3]), 3
    )

three.vals.counts <- do.call(rbind,
                             lapply(three.vals$variable,
                                    predictor.values.counts)
                             )
print(three.vals.counts)



## ----threedistinctnum----------------------------------------------------

var.3val.cor <- cor(train[, with(var.entropies, variable[distinct_vals==3])],
                    use='pairwise.complete.obs')
var.3val.cor[is.na(var.3val.cor)] <- 0
corrplot(var.3val.cor, method='color')



## ----fourdistinctnum2----------------------------------------------------

var.4val.cor <- cor(train[, with(var.entropies, variable[distinct_vals==4])],
                    use='pairwise.complete.obs')
var.4val.cor[is.na(var.4val.cor)] <- 0
corrplot(var.4val.cor, method='color', tl.cex=0.5)



## ----outlyingvalues------------------------------------------------------

outlying.values <- function(var, data=train, degree=2){
    uv <- train[,var]
    uv <- sort(uv[!is.na(uv)])
    uvneg <- unique(uv[ uv < 0])
    if(length(uvneg) == 1) negovs <- uvneg
    else negovs <- c()
    uv <- uv[ uv >= 0]
    luv <- log10(uv+1)
    if (length(luv) == 0) uvneg
    else {
        ovs <- unique(uv[ luv - mean(luv) > degree * sd(luv)])
        c(negovs, ovs)
    }
 }



## ----dpoutlyer-----------------------------------------------------------

dpoutlyers <- function(xs, data=train, offset=10, rarity = 0.001) {
    if (class(xs) != 'numeric' & class(xs) != 'integer') return(c())
    N <- length(xs)
    xs <- xs[!is.na(xs)]
    xsneg <- xs[xs < 0]
    xs <- xs[xs >= 0]
    olneg <- if (length(unique(xsneg)) == 1) unique(xsneg) else c()
    if(length(xs) == 0) return(olneg)
    txs <- table(xs)
    dps <- ceiling(log10(xs + offset))
    tdps <- table(dps)
    if(length(tdps) == 1) return(olneg)
    n <- max(dps)
    cdps <- rep(0, n)
    cdps[as.numeric(names(tdps))] <- as.numeric(tdps)
    if (length(cdps) <= 1) return(olneg)
    if ( (cdps[n-1] == 0) | (cdps[n]/N < rarity)) {
        polps <- unique(xs[dps == n])
        polps <- polps[polps > 10]
        uxs <- unique(xs)
        olpos <- polps[ polps > 2*max(setdiff(uxs, polps))]
        c(olneg, olpos )
    }
    else {
        olneg
    }
}



## ----outlyingvaluesevaluate----------------------------------------------

outlying.values.list <- lapply(numeric_val_counts$label,
                               function(var) {
                                   print("outlyers for ")
                                   print(var)
                                   dpoutlyers(train[,var], rarity=0.001)
                                   }
                               )
names(outlying.values.list) <- numeric_val_counts$label

print("number of numeric variables with identified error-codes")
print(sum(sapply(outlying.values.list, function(xs) length(xs) > 0)))



## ----markNAs-------------------------------------------------------------

save(outlying.values.list, file=paste(datapath, "outlyingValuesList.Rdata", sep=""))

train.ecfixed <- train
for(p in numeric_val_counts$label) {
    ov <- outlying.values.list[[p]]
    x <- train[,p]
    x[x %in% ov] <- NA
    train.ecfixed[,p] <- x
}

write.csv(train.ecfixed, file=paste(datapath, 'train_ecfixed.csv', sep=""))

test.ecfixed <- test
for(p in numeric_val_counts$label) {
    ob <- outlying.values.list[[p]]
    x <- test[,p]
    x[x %in% ov] <- NA
    test.ecfixed[,p] <- x
}

write.csv(test.ecfixed, file=paste(datapath, 'test_ecfixed.csv', sep=""))



## ----numnas--------------------------------------------------------------

nacount.rows <- rowSums(is.na(train.ecfixed))
nacount.cols <- data.frame(
    list(
        variable = names(train.ecfixed),
        count = sapply(names(train.ecfixed),
            function(p) sum(is.na(train.ecfixed[,p])))
        ),
    stringsAsFactors=FALSE
    )


predictors_allfilled <- with(nacount.cols, variable[count == 0])
predictors_num_allfilled <- intersect(predictors_allfilled, predictors_num)
var.entropies$nacount <- nacount.cols$count[var.entropies$variable]



## ----nonacolcor----------------------------------------------------------

nonacol.cor <- cor(train.ecfixed[, predictors_num_allfilled])



## ----vars192and193-------------------------------------------------------

print("correlation between numeric_192 and numeric_193")
print(with(train, cor(numeric_192, numeric_193, use="pairwise.complete.obs")))



## ----identicalvars-------------------------------------------------------

identical_vars <- list()
identical_vars$numeric_192 <- c('numeric_193')

print("correlation between numeric_192 and numeric_193")
print(with(train, cor(numeric_192, numeric_193, use="pairwise.complete.obs")))


